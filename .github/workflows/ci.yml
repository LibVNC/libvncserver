name: CI

on: [push, pull_request]

jobs:
  build:
    if: false
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        cmake_options:
          - "-DWITH_OPENSSL=ON  -DWITH_GNUTLS=OFF -DWITH_GCRYPT=OFF" # build with OpenSSL
          - "-DWITH_OPENSSL=OFF -DWITH_GNUTLS=ON  -DWITH_GCRYPT=ON"  # build with GnuTLS and Libgrypt
          - "-DWITH_OPENSSL=OFF -DWITH_GNUTLS=OFF -DWITH_GCRYPT=OFF" # build without external encryption libraries
          - "-DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-cross-mingw32-linux.cmake" # crosscompile with MinGW toolchain
        include:
          - os: macos-latest
            macos_cmake_options: "-DOPENSSL_ROOT_DIR=/usr/local/opt/openssl" # set this extra var for OSX
        exclude:
          - os: macos-latest
            cmake_options: "-DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-cross-mingw32-linux.cmake" # don't test MinGW from OSX
          - os: windows-latest
            cmake_options: "-DCMAKE_TOOLCHAIN_FILE=../cmake/Toolchain-cross-mingw32-linux.cmake" # don't test MinGW from OSX
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Ubuntu Build Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update
          sudo apt install libsdl2-dev liblzo2-dev libssl-dev gnutls-dev libgcrypt-dev mingw-w64-x86-64-dev binutils-mingw-w64-x86-64 gcc-mingw-w64-x86-64 wine
      - name: Install MacOS Build Dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update
          brew install sdl2 lzo
      - name: Build
        run: |
          mkdir build
          cd build
          cmake ${{ matrix.cmake_options }} ${{ matrix.macos_cmake_options }} ..
          cmake --build .
      - name: Prepare Test
        if: ${{ matrix.os == 'ubuntu-latest' }} # only ubuntu does crosscompile with MinGW toolchain
        run: |
          cp /usr/x86_64-w64-mingw32/lib/libwinpthread-1.dll build/test/
      - name: Test
        run: |
          cd build
          ctest -C Debug --output-on-failure
  fuzzing_build:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Ubuntu Build Dependencies
        run: |
          sudo apt update
          sudo apt install libsdl2-dev liblzo2-dev libssl-dev gnutls-dev libgcrypt-dev mingw-w64-x86-64-dev binutils-mingw-w64-x86-64 gcc-mingw-w64-x86-64 wine clang
      - name: Build
        env:
          CC: "clang"
          LIB_FUZZING_ENGINE: "-fsanitize=fuzzer"
          CFLAGS: "-fsanitize=address,fuzzer-no-link -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1"
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build .
  abi_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install liblzo2-dev libssl-dev gnutls-dev libgcrypt-dev abi-dumper abi-compliance-checker universal-ctags
      - name: Build libraries
        env:
          CFLAGS: "-gdwarf-4 -Og"      
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --target vncclient
          cmake --build . --target vncserver
      - name: Check ABI
        run: |
          mkdir abi-check
          cd abi-check
          abi-dumper -lver $GITHUB_REF_NAME ../build/libvncclient.so -o client-abi-new.dump -public-headers ../rfb
          abi-dumper -lver $GITHUB_REF_NAME ../build/libvncserver.so -o server-abi-new.dump -public-headers ../rfb
          abi-compliance-checker -l LibVNCClient  -old ../utils/abi/client-abi-v1.dump -new client-abi-new.dump -report-path client-report.html 
          abi-compliance-checker -l LibVNCServer  -old ../utils/abi/server-abi-v1.dump -new server-abi-new.dump -report-path server-report.html 
      
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: abi-check-result
          path: abi-check
            
